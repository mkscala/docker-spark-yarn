{
  "metadata" : {
    "name" : "Rickshaw",
    "user_save_timestamp" : "2014-12-15T00:55:09.510Z",
    "auto_save_timestamp" : "2014-12-15T00:50:41.883Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import notebook.front.third.d3._\nimport notebook._, front._, widgets._\nimport play.api.libs.json._\nimport notebook.JsonCodec._\nimport notebook.Series._\n  \ndef createTs(start:Long, step:Long=60000 /*1m*/ , _nb:Int=100)(name:String, color:String=\"steelblue\"):Series = {\n  val nb = (step/1000).toInt\n  val data = Seq.fill[Double](nb)(scala.util.Random.nextDouble*50)\n                .zipWithIndex\n                .map{ case (y, x) => ((start.toDouble+x*step)/1000, y) }\n                  \n  Series(name, color, data)\n}\nval color9:Seq[String] = Seq(\n        \"#423d4f\",\n        \"#4a6860\",\n        \"#848f39\",\n        \"#a2b73c\",\n        \"#ddcb53\",\n        \"#c5a32f\",\n        \"#7d5836\",\n        \"#963b20\",\n        \"#7c2626\",\n        \"#491d37\",\n        \"#2f254a\"\n    ).reverse\n\nval seriesList = color9.take(6)\n  \ndef createTss(start:Long, step:Int=60*1000, nb:Int = 100):Seq[Series] = \n  ('a' to 'z')  .take(seriesList.size)\n                  .map(_.toString)\n                  .zip(seriesList)\n                  .map(x => createTs(start, step, nb)(x._1, x._2))\n  \nval orig = {\n  import java.util.Calendar._\n  val c = getInstance\n  c.set(YEAR, 2014)\n  c.set(MONTH, 1)\n  c.set(DATE, 1)\n  c.getTime.getTime\n}\nval step = 60*1000\nval nb = 50\n\nval data = createTss(orig, step, nb)\n\nval p = new Playground(data, List(Script(\"rickshawts\", \n                                          Json.obj(\n                                            \"renderer\" → \"stack\",\n                                            \"fixed\" → Json.obj(\n                                                        \"interval\" → (step/1000),\n                                                        \"max\" → 100,\n                                                        \"baseInSec\" → (orig/1000)\n                                                      )\n                                          ))))(seriesCodec)\n",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\n// update the timseries 5 times\nFuture.sequence((1 to 5).map{ i => \n  Future { \n    // update the graph with new data every 10 seconds\n    Thread.sleep(i*10*1000); \n    //`p` is the Playground instance that shows a timeseries\n    p(createTss(orig+i*60*step, 60000))\n  } \n})\n",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}